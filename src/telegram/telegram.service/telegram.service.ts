import { Injectable, Logger } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf, Context } from 'telegraf';
import fetch from 'node-fetch';
import { OpenAiService } from '../../openai/openai.service/openai.service';
import { VoiceService } from '../../voice/voice.service/voice.service';
import { VideoService } from '../../video/video.service/video.service';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { UserProfile } from '../../user/entities/user-profile.entity';
import { UserTokens } from '../../user/entities/user-tokens.entity';
import { TokenTransaction } from '../../user/entities/token-transaction.entity';
import { OrderIncome } from '../../user/entities/order-income.entity';

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  // —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  private readonly welcomeMessage =
    '–Ø —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ "We have music". –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—é –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤, —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–∏—Å—Ç—Ä–∏–±—å—é—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è? üé∂';
  // –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Ç–æ–∫–µ–Ω–∞—Ö
  private readonly COST_TEXT = 1;
  private readonly COST_IMAGE = 60;
  private readonly COST_VIDEO = 200; // —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
  private readonly COST_VOICE_RECOGNITION = 1;
  private readonly COST_VOICE_REPLY_EXTRA = 3; // –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
  // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  private readonly COST_FILE = 2;

  // –§–ª–∞–≥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  private readonly IMAGE_GENERATION_ENABLED = true; // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞
  private readonly VIDEO_GENERATION_ENABLED = false; // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞

  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly openai: OpenAiService,
    private readonly voice: VoiceService,
    private readonly video: VideoService,
    @InjectRepository(UserProfile)
    private readonly profileRepo: Repository<UserProfile>,
    @InjectRepository(UserTokens)
    private readonly tokensRepo: Repository<UserTokens>,
    @InjectRepository(TokenTransaction)
    private readonly txRepo: Repository<TokenTransaction>,
    @InjectRepository(OrderIncome)
    private readonly incomeRepo: Repository<OrderIncome>,
  ) {
    this.registerHandlers();
  }

  // –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –æ –¥–≤–∏–∂–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
  private async addTransaction(profile: UserProfile, amount: number, type: 'DEBIT' | 'CREDIT', comment?: string, orderIncomeId?: number) {
    const tx = this.txRepo.create({
      userId: profile.id,
      amount,
      type,
      comment,
      orderIncomeId,
    });
    await this.txRepo.save(tx);
  }
  private async sendPhoto(ctx: Context, image: string | Buffer) {
    if (Buffer.isBuffer(image)) {
      // –ø–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ Buffer
      await ctx.replyWithPhoto({ source: image });
    } else {
      // –ø–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ URL
      await ctx.replyWithPhoto(image);
    }
  }

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ (GIF/MP4) –∏–∑ –ø–∞–ø–∫–∏ assets/animations
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  private async sendAnimation(ctx: Context, fileName: string, caption?: string) {
    // –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return this.sendTextMessage(ctx, caption || '');
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–º–µ–Ω—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏)
  private async sendTextMessage(ctx: Context, text: string) {
    return ctx.reply(text);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  private async sendFiles(ctx: Context, files: { filename: string; buffer: Buffer }[]) {
    for (const f of files) {
      await ctx.replyWithDocument({ source: f.buffer, filename: f.filename });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  private async sendVideo(ctx: Context, videoBuffer: Buffer, caption?: string) {
    try {
      await ctx.replyWithVideo({ source: videoBuffer }, caption ? { caption } : undefined);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ', error);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
      await ctx.replyWithDocument({ source: videoBuffer, filename: 'generated_video.mp4' });
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
  private async updateVideoProgress(ctx: Context, messageId: number, status: string, attempt: number, _maxAttempts: number) {
    try {
      void _maxAttempts;
      const elapsedSeconds = attempt * 10;
      const progressText = `–°–û–ó–î–ê–Æ –í–ò–î–ï–û ---- ${elapsedSeconds}—Å ---- ${status}`;
      await ctx.telegram.editMessageText(ctx.chat.id, messageId, undefined, progressText);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–∏–¥–µ–æ', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  private async updateImageProgress(ctx: Context, messageId: number, attempt: number, maxAttempts: number) {
    try {
      const elapsedSeconds = attempt * 10;
      const progressText = `–†–ò–°–£–Æ ---- ${elapsedSeconds}—Å ---- ${attempt}/${maxAttempts}`;
      await ctx.telegram.editMessageText(ctx.chat.id, messageId, undefined, progressText);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', error);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  private async generateImageWithProgress(ctx: Context, prompt: string, progressMsg: any): Promise<string | Buffer | null> {
    const maxAttempts = 6; // –º–∞–∫—Å–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è (6 * 10 —Å–µ–∫—É–Ω–¥)
    let attempts = 0;

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    const progressInterval = setInterval(async () => {
      attempts++;
      if (attempts <= maxAttempts) {
        await this.updateImageProgress(ctx, progressMsg.message_id, attempts, maxAttempts);
      }
    }, 10000);

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const image = await this.openai.generateImage(prompt);

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      clearInterval(progressInterval);

      return image;
    } catch (error) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      clearInterval(progressInterval);
      throw error;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  private async generateImageFromPhotoWithProgress(
    ctx: Context,
    imageBuffer: Buffer,
    prompt: string,
    progressMsg: any,
  ): Promise<string | Buffer | null> {
    const maxAttempts = 6; // –º–∞–∫—Å–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è (6 * 10 —Å–µ–∫—É–Ω–¥)
    let attempts = 0;

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    const progressInterval = setInterval(async () => {
      attempts++;
      if (attempts <= maxAttempts) {
        await this.updateImageProgress(ctx, progressMsg.message_id, attempts, maxAttempts);
      }
    }, 10000);

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ
      const image = await this.openai.generateImageFromPhoto(imageBuffer, prompt);

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      clearInterval(progressInterval);

      return image;
    } catch (error) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      clearInterval(progressInterval);
      throw error;
    }
  }

  /** –°–ø–∏—Å—ã–≤–∞–µ—Ç cost —Ç–æ–∫–µ–Ω–æ–≤. –ü—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Å–æ–æ–±—â–∞–µ—Ç –±–µ–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏ */
  private async chargeTokens(ctx: Context, profile: UserProfile, cost: number): Promise<boolean> {
    if (profile.tokens.tokens < cost) {
      await ctx.reply('–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.');
      return false;
    }
    profile.tokens.tokens -= cost;
    await this.tokensRepo.save(profile.tokens);
    await this.addTransaction(profile, cost, 'DEBIT');
    return true;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
   */
  private async findOrCreateProfile(from: { id: number; first_name?: string; username?: string }): Promise<UserProfile> {
    let profile = await this.profileRepo.findOne({
      where: { telegramId: String(from.id) },
      relations: ['tokens'],
    });

    const now = new Date();
    if (!profile) {
      profile = this.profileRepo.create({
        telegramId: String(from.id),
        firstName: from.first_name,
        username: from.username,
        firstVisitAt: now,
        lastMessageAt: now,
      });
      profile = await this.profileRepo.save(profile);
      let tokens = this.tokensRepo.create({ userId: profile.id });
      tokens = await this.tokensRepo.save(tokens);
      profile.userTokensId = tokens.id;
      await this.profileRepo.save(profile);
      profile.tokens = tokens;
      await this.addTransaction(profile, tokens.tokens, 'CREDIT', 'initial balance');
    } else {
      profile.lastMessageAt = now;
      await this.profileRepo.save(profile);
      if (!profile.tokens) {
        profile.tokens = await this.tokensRepo.findOne({ where: { userId: profile.id } });
      }
    }

    if (!profile.tokens) {
      let tokens = this.tokensRepo.create({ userId: profile.id });
      tokens = await this.tokensRepo.save(tokens);
      profile.userTokensId = tokens.id;
      await this.profileRepo.save(profile);
      profile.tokens = tokens;
      await this.addTransaction(profile, tokens.tokens, 'CREDIT', 'initial balance');
    }

    // –ê–≤—Ç–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –≤–µ—Ç–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ e-mail

    return profile;
  }

  /** –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë—Ç (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å */
  private async ensureUser(ctx: Context): Promise<UserProfile | null> {
    const from = ctx.message.from;
    const profile = await this.findOrCreateProfile(from);
    return profile;
  }

  private async processOpenAiRequest(ctx: Context, q: string, user: UserProfile, thinkingMsg: any) {
    try {
      const answer = await this.openai.chat(q, ctx.message.from.id);
      await ctx.telegram.deleteMessage(ctx.chat.id, thinkingMsg.message_id);

      if (answer.text.startsWith('/video')) {
        if (!this.VIDEO_GENERATION_ENABLED) {
          await ctx.reply('üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
          return;
        }
        if (!(await this.chargeTokens(ctx, user, this.COST_VIDEO))) return;
        const prompt = answer.text.replace('/video', '').trim();
        if (!prompt) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /video');
          return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        const optimizeMsg = await this.sendAnimation(ctx, 'thinking_pen_a.mp4', '–û–ü–¢–ò–ú–ò–ó–ò–†–£–Æ –ó–ê–ü–†–û–° ...');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ (–≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞)
        const videoResult = await this.video.generateVideo(prompt, {
          onProgress: (status, attempt, maxAttempts) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–°–û–ó–î–ê–Æ –í–ò–î–ï–û" –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            if (attempt === 0) {
              this.updateVideoProgress(ctx, optimizeMsg.message_id, '–°–û–ó–î–ê–Æ –í–ò–î–ï–û', attempt, maxAttempts);
            } else {
              this.updateVideoProgress(ctx, optimizeMsg.message_id, status, attempt, maxAttempts);
            }
          },
        });

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        try {
          await ctx.telegram.deleteMessage(ctx.chat.id, optimizeMsg.message_id);
        } catch (error) {
          this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º', error);
        }

        if (videoResult.success && videoResult.videoUrl) {
          const videoBuffer = await this.video.downloadVideo(videoResult.videoUrl);
          if (videoBuffer) {
            await this.sendVideo(ctx, videoBuffer, `–í–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${prompt}"`);
          } else {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ');
          }
        } else {
          await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ: ${videoResult.error}`);
        }
      } else if (answer.text.startsWith('/imagine')) {
        if (!this.IMAGE_GENERATION_ENABLED) {
          await ctx.reply('üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
          return;
        }
        if (!(await this.chargeTokens(ctx, user, this.COST_IMAGE))) return;
        const drawMsg = await this.sendAnimation(ctx, 'drawing_a.mp4', '–†–ò–°–£–Æ ...');
        const prompt = answer.text.replace('/imagine', '').trim();
        const image = await this.generateImageWithProgress(ctx, prompt, drawMsg);
        await ctx.telegram.deleteMessage(ctx.chat.id, drawMsg.message_id);
        if (image) {
          await this.sendPhoto(ctx, image);
        } else {
          await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        }
      } else {
        if (!(await this.chargeTokens(ctx, user, this.COST_TEXT))) return;
        await ctx.reply(answer.text);
      }
      if (answer.files.length) {
        await this.sendFiles(ctx, answer.files);
      }
    } catch (error) {
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–£–ú–ê–Æ" –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      try {
        await ctx.telegram.deleteMessage(ctx.chat.id, thinkingMsg.message_id);
      } catch (deleteError) {
        this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–£–ú–ê–Æ"', deleteError);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∑–∞–Ω—è—Ç–æ–≥–æ —Ç—Ä–µ–¥–∞
      if (error instanceof Error && error.message.includes('–¢—Ä–µ–¥ —É–∂–µ –∑–∞–Ω—è—Ç')) {
        await ctx.reply('‚è≥ –¢—Ä–µ–¥ —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ OpenAI', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    }
  }

  private registerHandlers() {
    // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è e-mail –ø–æ userId
    const awaitingEmail = new Set<number>();
    const emailVerified = new Set<number>();

    const isEmail = (text: string) => {
      return /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/.test(text.toLowerCase());
    };

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∏–¥–ª–≤–∞—Ä: –µ—Å–ª–∏ –∂–¥—ë–º e-mail, –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    this.bot.use(async (ctx, next) => {
      const userId = (ctx.from as any)?.id as number | undefined;
      if (!userId) return next();

      // –†–∞–∑—Ä–µ—à–∞–µ–º /start –≤—Å–µ–≥–¥–∞
      const text = (ctx as any).message?.text as string | undefined;
      if (text?.startsWith('/start')) {
        return next();
      }

      // –ï—Å–ª–∏ e-mail —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (emailVerified.has(userId)) {
        return next();
      }

      // –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º e-mail ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (!awaitingEmail.has(userId)) {
        return next();
      }

      // –û–∂–∏–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å e-mail
      if (!text) {
        await ctx.reply('‚úâÔ∏è –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à e-mail –æ—Ç –ø—Ä–æ—Ñ–∏–ª—è We Have Music.');
        return;
      }

      const email = text.trim();
      if (!isEmail(email)) {
        await ctx.reply('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ e-mail, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ We Have Music.');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ GET c query string, –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–±—É–µ–º POST JSON
        const url = `https://api.wehavemusic.tech/user/exists-by-email?email=${encodeURIComponent(email)}`;
        const secret = process.env.TELEGRAM_BOT_SECRET || process.env.X_TELEGRAM_BOT_SECRET;
        const baseHeaders: any = secret ? { 'x-telegram-bot-secret': secret } : {};
        let res = await fetch(url, { method: 'GET', headers: baseHeaders, timeout: 20000 as any });
        if (!res.ok) {
          // fallback –Ω–∞ POST
          res = await fetch('https://api.wehavemusic.tech/user/exists-by-email', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', ...baseHeaders },
            body: JSON.stringify({ email }),
            timeout: 20000 as any,
          });
        }

        if (!res.ok) {
          const bodyText = await res.text().catch(() => '');
          this.logger.warn(`Email check failed after fallback: status=${res.status}, bodyPreview=${bodyText.slice(0, 500)}`);
          await ctx.reply('üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å e-mail. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return;
        }

        const data: any = await res.json().catch(() => ({}));
        // –û–∂–∏–¥–∞–µ–º –ø–æ–ª–µ exists=true/false, –∏–Ω–∞—á–µ –¥–æ–ø—É—Å–∫–∞–µ–º –ø–æ 2xx
        const exists = typeof data?.exists === 'boolean' ? data.exists : true;

        if (!exists) {
          await ctx.reply('‚ùå –≠—Ç–æ—Ç e-mail –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ e-mail –∏–∑ We Have Music –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.');
          return;
        }

        awaitingEmail.delete(userId);
        emailVerified.add(userId);
        await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! E-mail –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.');
        await this.sendAnimation(ctx, 'cute_a.mp4', this.welcomeMessage);
        return;
      } catch (err) {
        this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ e-mail', err);
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ e-mail. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }
    });

    this.bot.on('text', async (ctx, next) => {
      try {
        const q = ctx.message.text?.trim();
        if (q?.startsWith('/start')) {
          return next();
        }
        const user = await this.ensureUser(ctx);
        if (!user) return;
        if (!q) return;

        // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫—Ä–æ–º–µ '/image', '/video', —á—Ç–æ–±—ã –æ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å –¥–∞–ª–µ–µ
        if (q.startsWith('/') && !q.startsWith('/image') && !q.startsWith('/imagine') && !q.startsWith('/video')) {
          return next();
        }

        if (q.startsWith('/video')) {
          if (!this.VIDEO_GENERATION_ENABLED) {
            await ctx.reply('üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            return;
          }
          if (!(await this.chargeTokens(ctx, user, this.COST_VIDEO))) return;
          const prompt = q.replace('/video', '').trim();
          if (!prompt) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /video');
            return;
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
          const optimizeMsg = await this.sendAnimation(ctx, 'thinking_pen_a.mp4', '–û–ü–¢–ò–ú–ò–ó–ò–†–£–Æ –ó–ê–ü–†–û–° ...');

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ (–≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞)
          const videoResult = await this.video.generateVideo(prompt, {
            onProgress: (status, attempt, maxAttempts) => {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–°–û–ó–î–ê–Æ –í–ò–î–ï–û" –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
              if (attempt === 0) {
                this.updateVideoProgress(ctx, optimizeMsg.message_id, '–°–û–ó–î–ê–Æ –í–ò–î–ï–û', attempt, maxAttempts);
              } else {
                this.updateVideoProgress(ctx, optimizeMsg.message_id, status, attempt, maxAttempts);
              }
            },
          });

          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
          try {
            await ctx.telegram.deleteMessage(ctx.chat.id, optimizeMsg.message_id);
          } catch (error) {
            this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º', error);
          }

          if (videoResult.success && videoResult.videoUrl) {
            const videoBuffer = await this.video.downloadVideo(videoResult.videoUrl);
            if (videoBuffer) {
              await this.sendVideo(ctx, videoBuffer, `–í–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${prompt}"`);
            } else {
              await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ');
            }
          } else {
            await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ: ${videoResult.error}`);
          }
        } else if (q.startsWith('/image')) {
          if (!this.IMAGE_GENERATION_ENABLED) {
            await ctx.reply('üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            return;
          }
          if (!(await this.chargeTokens(ctx, user, this.COST_IMAGE))) return;
          const placeholder = await this.sendAnimation(ctx, 'drawing_a.mp4', '–†–ò–°–£–Æ ...');
          const prompt = q.replace('/image', '').trim();
          const image = await this.generateImageWithProgress(ctx, prompt, placeholder);
          await ctx.telegram.deleteMessage(ctx.chat.id, placeholder.message_id);
          if (image) {
            await this.sendPhoto(ctx, image);
          } else {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
          }
        } else {
          // –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç
          // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –º—ã "–¥—É–º–∞–µ–º" –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º
          const thinkingMsg = await this.sendAnimation(ctx, 'thinking_pen_a.mp4', '–î–£–ú–ê–Æ ...');

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          this.processOpenAiRequest(ctx, q, user, thinkingMsg).catch((error) => {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ OpenAI –∑–∞–ø—Ä–æ—Å–∞', error);
          });
        }
      } catch (err) {
        this.logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    });

    this.bot.on('voice', async (ctx) => {
      try {
        const user = await this.ensureUser(ctx);
        if (!user) return;
        if (!(await this.chargeTokens(ctx, user, this.COST_VOICE_RECOGNITION))) return;
        const tgVoice = ctx.message.voice;
        const listenMsg = await this.sendAnimation(ctx, 'listen_a.mp4', '–°–õ–£–®–ê–Æ ...');
        const text = await this.voice.voiceToText(tgVoice);
        await ctx.telegram.deleteMessage(ctx.chat.id, listenMsg.message_id);
        if (!text) return;

        const cleaned = text.trim().toLowerCase();
        if (cleaned.startsWith('—Å–æ–∑–¥–∞–π –≤–∏–¥–µ–æ') || cleaned.startsWith('video')) {
          if (!this.VIDEO_GENERATION_ENABLED) {
            await ctx.reply('üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            return;
          }
          if (!(await this.chargeTokens(ctx, user, this.COST_VIDEO))) return;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
          const optimizeMsg = await this.sendAnimation(ctx, 'thinking_pen_a.mp4', '–û–ü–¢–ò–ú–ò–ó–ò–†–£–Æ –ó–ê–ü–†–û–° ...');

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ (–≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞)
          const videoResult = await this.video.generateVideo(text, {
            onProgress: (status, attempt, maxAttempts) => {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–°–û–ó–î–ê–Æ –í–ò–î–ï–û" –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
              if (attempt === 0) {
                this.updateVideoProgress(ctx, optimizeMsg.message_id, '–°–û–ó–î–ê–Æ –í–ò–î–ï–û', attempt, maxAttempts);
              } else {
                this.updateVideoProgress(ctx, optimizeMsg.message_id, status, attempt, maxAttempts);
              }
            },
          });

          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
          try {
            await ctx.telegram.deleteMessage(ctx.chat.id, optimizeMsg.message_id);
          } catch (error) {
            this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º', error);
          }

          if (videoResult.success && videoResult.videoUrl) {
            const videoBuffer = await this.video.downloadVideo(videoResult.videoUrl);
            if (videoBuffer) {
              await this.sendVideo(ctx, videoBuffer, `–í–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${text}"`);
            } else {
              await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ');
            }
          } else {
            await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ: ${videoResult.error}`);
          }
        } else if (cleaned.startsWith('–Ω–∞—Ä–∏—Å—É–π') || cleaned.startsWith('imagine')) {
          if (!this.IMAGE_GENERATION_ENABLED) {
            await ctx.reply('üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            return;
          }
          if (!(await this.chargeTokens(ctx, user, this.COST_IMAGE))) return;
          const placeholder = await this.sendAnimation(ctx, 'drawing_a.mp4', '–†–ò–°–£–Æ ...');
          const image = await this.generateImageWithProgress(ctx, text, placeholder);
          await ctx.telegram.deleteMessage(ctx.chat.id, placeholder.message_id);
          if (image) {
            await this.sendPhoto(ctx, image);
          } else {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é');
          }
        } else {
          const thinkingMsg = await this.sendAnimation(ctx, 'thinking_pen_a.mp4', '–î–£–ú–ê–Æ ...');

          try {
            const answer = await this.openai.chat(text, ctx.message.from.id);

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–£–ú–ê–Æ" —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            await ctx.telegram.deleteMessage(ctx.chat.id, thinkingMsg.message_id);

            if (answer.text.startsWith('/video')) {
              if (!this.VIDEO_GENERATION_ENABLED) {
                await ctx.reply('üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
                return;
              }
              if (!(await this.chargeTokens(ctx, user, this.COST_VIDEO))) return;
              const prompt = answer.text.replace('/video', '').trim();
              if (!prompt) {
                await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /video');
                return;
              }

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
              const optimizeMsg = await this.sendAnimation(ctx, 'thinking_pen_a.mp4', '–û–ü–¢–ò–ú–ò–ó–ò–†–£–Æ –ó–ê–ü–†–û–° ...');

              // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ (–≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞)
              const videoResult = await this.video.generateVideo(prompt, {
                onProgress: (status, attempt, maxAttempts) => {
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–°–û–ó–î–ê–Æ –í–ò–î–ï–û" –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                  if (attempt === 0) {
                    this.updateVideoProgress(ctx, optimizeMsg.message_id, '–°–û–ó–î–ê–Æ –í–ò–î–ï–û', attempt, maxAttempts);
                  } else {
                    this.updateVideoProgress(ctx, optimizeMsg.message_id, status, attempt, maxAttempts);
                  }
                },
              });
              if (videoResult.success && videoResult.videoUrl) {
                const videoBuffer = await this.video.downloadVideo(videoResult.videoUrl);
                if (videoBuffer) {
                  await this.sendVideo(ctx, videoBuffer, `–í–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${text}"`);
                } else {
                  await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ');
                }
              } else {
                await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ: ${videoResult.error}`);
              }
            } else if (answer.text.startsWith('/imagine')) {
              if (!this.IMAGE_GENERATION_ENABLED) {
                await ctx.reply('üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
                return;
              }
              if (!(await this.chargeTokens(ctx, user, this.COST_IMAGE))) return;
              const drawMsg = await this.sendAnimation(ctx, 'drawing_a.mp4', '–†–ò–°–£–Æ ...');
              const prompt = answer.text.replace('/imagine', '').trim();
              const image = await this.generateImageWithProgress(ctx, prompt, drawMsg);
              await ctx.telegram.deleteMessage(ctx.chat.id, drawMsg.message_id);
              if (image) {
                await this.sendPhoto(ctx, image);
              } else {
                await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
              }
            } else {
              if (!(await this.chargeTokens(ctx, user, this.COST_VOICE_REPLY_EXTRA))) return;
              const recordMsg = await this.sendAnimation(ctx, 'play_a.mp4', '–ó–ê–ü–ò–°–´–í–ê–Æ ...');
              const ogg = await this.voice.textToSpeech(answer.text);
              await ctx.telegram.deleteMessage(ctx.chat.id, recordMsg.message_id);
              try {
                await ctx.replyWithVoice({ source: ogg });
              } catch (err) {
                this.logger.warn('–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã', err);
                await ctx.reply(answer.text);
              }
            }
            if (answer.files.length) {
              await this.sendFiles(ctx, answer.files);
            }
          } catch (error) {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–£–ú–ê–Æ" –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try {
              await ctx.telegram.deleteMessage(ctx.chat.id, thinkingMsg.message_id);
            } catch (deleteError) {
              this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–£–ú–ê–Æ"', deleteError);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∑–∞–Ω—è—Ç–æ–≥–æ —Ç—Ä–µ–¥–∞
            if (error instanceof Error && error.message.includes('–¢—Ä–µ–¥ —É–∂–µ –∑–∞–Ω—è—Ç')) {
              await ctx.reply('‚è≥ –¢—Ä–µ–¥ —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.');
            } else {
              // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ OpenAI', error);
              await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
            return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
          }
        }
      } catch (err) {
        this.logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    });

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    this.bot.on('photo', async (ctx) => {
      try {
        const caption = ctx.message.caption?.trim() ?? '';
        const user = await this.ensureUser(ctx);
        if (!user) return;

        const photos = ctx.message.photo;
        const best = photos[photos.length - 1];
        const link = await ctx.telegram.getFileLink(best.file_id);
        const res = await fetch(link.href);
        if (!res.ok) throw new Error(`TG download error: ${res.statusText}`);
        const buffer = Buffer.from(await res.arrayBuffer());

        if (caption.startsWith('/image')) {
          if (!this.IMAGE_GENERATION_ENABLED) {
            await ctx.reply('üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            return;
          }
          if (!(await this.chargeTokens(ctx, user, this.COST_IMAGE))) return;
          const drawMsg = await this.sendAnimation(ctx, 'drawing_a.mp4', '–†–ò–°–£–Æ ...');
          const prompt = caption.replace('/image', '').trim();
          const image = await this.generateImageFromPhotoWithProgress(ctx, buffer, prompt, drawMsg);
          await ctx.telegram.deleteMessage(ctx.chat.id, drawMsg.message_id);
          if (image) {
            await this.sendPhoto(ctx, image);
          } else {
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
          }
        } else if (caption.startsWith('/video')) {
          if (!this.VIDEO_GENERATION_ENABLED) {
            await ctx.reply('üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
            return;
          }
          if (!(await this.chargeTokens(ctx, user, this.COST_VIDEO))) return;
          const prompt = caption.replace('/video', '').trim();
          if (!prompt) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /video');
            return;
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
          const optimizeMsg = await this.sendAnimation(ctx, 'thinking_pen_a.mp4', '–û–ü–¢–ò–ú–ò–ó–ò–†–£–Æ –ó–ê–ü–†–û–° ...');

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–≤–Ω—É—Ç—Ä–∏ –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞)
          const videoResult = await this.video.generateVideoFromImage(buffer, prompt, {
            onProgress: (status, attempt, maxAttempts) => {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–°–û–ó–î–ê–Æ –í–ò–î–ï–û" –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
              if (attempt === 0) {
                this.updateVideoProgress(ctx, optimizeMsg.message_id, '–°–û–ó–î–ê–Æ –í–ò–î–ï–û', attempt, maxAttempts);
              } else {
                this.updateVideoProgress(ctx, optimizeMsg.message_id, status, attempt, maxAttempts);
              }
            },
          });

          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
          try {
            await ctx.telegram.deleteMessage(ctx.chat.id, optimizeMsg.message_id);
          } catch (error) {
            this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º', error);
          }

          if (videoResult.success && videoResult.videoUrl) {
            const videoBuffer = await this.video.downloadVideo(videoResult.videoUrl);
            if (videoBuffer) {
              await this.sendVideo(ctx, videoBuffer, `–í–∏–¥–µ–æ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: "${prompt}"`);
            } else {
              await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ');
            }
          } else {
            await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ: ${videoResult.error}`);
          }
        } else {
          if (!(await this.chargeTokens(ctx, user, this.COST_TEXT))) return;
          const thinkingMsg = await this.sendAnimation(ctx, 'thinking_pen_a.mp4', '–î–£–ú–ê–Æ ...');
          const answer = await this.openai.chatWithImage(caption, ctx.message.from.id, buffer);
          await ctx.telegram.deleteMessage(ctx.chat.id, thinkingMsg.message_id);
          await ctx.reply(answer.text);
          if (answer.files.length) {
            await this.sendFiles(ctx, answer.files);
          }
        }
      } catch (err) {
        this.logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }
    });

    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (pdf, doc –∏ –¥—Ä.)
    this.bot.on('document', async (ctx) => {
      try {
        const caption = ctx.message.caption?.trim() ?? '';
        const user = await this.ensureUser(ctx);
        if (!user) return;

        const doc = ctx.message.document;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 100MB)
        const maxFileSize = 100 * 1024 * 1024; // 100MB –≤ –±–∞–π—Ç–∞—Ö
        if (doc.file_size && doc.file_size > maxFileSize) {
          await ctx.reply(`üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${(doc.file_size / 1024 / 1024).toFixed(1)}MB). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100MB.`);
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å–ø–∏—Å–æ–∫, —á—Ç–æ –∏ –≤ OpenAiService)
        const supportedFormats = [
          '.c',
          '.cpp',
          '.css',
          '.csv',
          '.doc',
          '.docx',
          '.gif',
          '.go',
          '.html',
          '.java',
          '.jpeg',
          '.jpg',
          '.js',
          '.json',
          '.md',
          '.pdf',
          '.php',
          '.pkl',
          '.png',
          '.pptx',
          '.py',
          '.rb',
          '.tar',
          '.tex',
          '.ts',
          '.txt',
          '.webp',
          '.xlsx',
          '.xml',
          '.zip',
        ];
        const fileExtension = doc.file_name ? doc.file_name.toLowerCase().substring(doc.file_name.lastIndexOf('.')) : '';

        if (!supportedFormats.includes(fileExtension)) {
          await ctx.reply(`üìÑ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ${fileExtension} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${supportedFormats.join(', ')}`);
          return;
        }

        this.logger.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç: ${doc.file_name}, —Ä–∞–∑–º–µ—Ä: ${doc.file_size} –±–∞–π—Ç, —Ñ–æ—Ä–º–∞—Ç: ${fileExtension}`);

        const link = await ctx.telegram.getFileLink(doc.file_id);
        const res = await fetch(link.href);
        if (!res.ok) throw new Error(`TG download error: ${res.statusText}`);
        const buffer = Buffer.from(await res.arrayBuffer());

        if (!(await this.chargeTokens(ctx, user, this.COST_FILE))) return;

        const thinkingMsg = await this.sendAnimation(ctx, 'thinking_pen_a.mp4', '–î–£–ú–ê–Æ ...');

        try {
          const answer = await this.openai.chatWithFile(caption || ' ', ctx.message.from.id, buffer, doc.file_name || 'file');
          await ctx.telegram.deleteMessage(ctx.chat.id, thinkingMsg.message_id);
          await ctx.reply(answer.text);
          if (answer.files.length) {
            await this.sendFiles(ctx, answer.files);
          }
        } catch (error) {
          await ctx.telegram.deleteMessage(ctx.chat.id, thinkingMsg.message_id);
          this.logger.error('–û—à–∏–±–∫–∞ OpenAI –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);

          // –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          if (error instanceof Error) {
            if (error.message.includes('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞')) {
              await ctx.reply(`‚ùå ${error.message}`);
            } else if (error.message.includes('Run failed')) {
              await ctx.reply(
                'ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.',
              );
            } else if (error.message.includes('file size')) {
              await ctx.reply('üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
            } else {
              await ctx.reply('ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
            }
          } else {
            await ctx.reply('ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.');
          }
        }
      } catch (err) {
        this.logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞', err);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      }
    });

    this.bot.command('img', async (ctx) => {
      try {
        const user = await this.ensureUser(ctx);
        if (!user) return;
        if (!this.IMAGE_GENERATION_ENABLED) {
          await ctx.reply('üö´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
          return;
        }
        if (!(await this.chargeTokens(ctx, user, this.COST_IMAGE))) return;
        const prompt = ctx.message.text.replace('/img', '').trim();
        const placeholder = await this.sendAnimation(ctx, 'drawing_a.mp4', '–†–ò–°–£–Æ ...');
        const image = await this.generateImageWithProgress(ctx, prompt, placeholder);
        await ctx.telegram.deleteMessage(ctx.chat.id, placeholder.message_id);
        if (image) {
          await this.sendPhoto(ctx, image);
        } else {
          await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
      } catch (err) {
        this.logger.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã img', err);
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /img');
      }
    });

    // –∫–æ–º–∞–Ω–¥–∞ /hello –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    this.bot.command('hello', async (ctx) => {
      await this.findOrCreateProfile(ctx.message.from);
      await this.sendAnimation(ctx, 'cute_a.mp4', this.welcomeMessage);
    });
    // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å–ª–µ—à–∞
    this.bot.hears(/^hello$/i, async (ctx) => {
      await this.findOrCreateProfile(ctx.message.from);
      await this.sendAnimation(ctx, 'cute_a.mp4', this.welcomeMessage);
    });

    // –æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile –∏ —Ç–µ–∫—Å—Ç–∞ "profile"
    const profileHandler = async (ctx: Context) => {
      const profile = await this.findOrCreateProfile(ctx.message.from);

      const userParts = [] as string[];
      if (profile.firstName) userParts.push(profile.firstName);
      if (profile.username) userParts.push(`@${profile.username}`);
      const userInfo = userParts.join(' ').trim() || profile.telegramId;

      const message =
        `–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>${userInfo}</b>\n` +
        `–í–∞—à –±–∞–ª–∞–Ω—Å: <b>${profile.tokens.tokens} —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n` +
        `üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n\n` +
        `üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b>\n` +
        `‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: <code>/image [–æ–ø–∏—Å–∞–Ω–∏–µ]</code>\n` +
        `‚Ä¢ –ü—Ä–∏–º–µ—Ä: <code>/image –∫—Ä–∞—Å–∏–≤–∞—è –∫–æ—à–∫–∞</code>\n` +
        `‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>${this.COST_IMAGE} —Ç–æ–∫–µ–Ω–æ–≤</b>\n\n` +
        `üéµ <b>–†–∞–±–æ—Ç–∞ —Å –∞—É–¥–∏–æ:</b>\n` +
        `‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏: <b>${this.COST_VOICE_RECOGNITION} —Ç–æ–∫–µ–Ω</b>\n` +
        `‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞: <b>${this.COST_VOICE_REPLY_EXTRA} —Ç–æ–∫–µ–Ω–∞</b>\n\n` +
        `üìÑ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b>\n` +
        `‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>${this.COST_FILE} —Ç–æ–∫–µ–Ω–∞</b>\n\n` +
        `üí¨ <b>–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n` +
        `‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>${this.COST_TEXT} —Ç–æ–∫–µ–Ω</b>`;

      await ctx.reply(message, {
        parse_mode: 'HTML',
      });
    };

    // –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    this.bot.command('profile', profileHandler);
    // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å–ª–µ—à–∞
    this.bot.hears(/^profile$/i, profileHandler);

    // /start: –µ—Å–ª–∏ –µ—Å—Ç—å payload (deeplink —Å —Å–∞–π—Ç–∞) ‚Äî —Å—Ä–∞–∑—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º; –∏–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º e-mail
    this.bot.start(async (ctx) => {
      const from = ctx.from as any;
      const userId = from?.id as number | undefined;
      if (!userId) return;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º payload: telegraf –∫–ª–∞–¥—ë—Ç –≤ ctx.startPayload; –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
      const payload = (ctx as any).startPayload ?? (((ctx as any).message?.text || '').split(' ').slice(1).join(' ') || '').trim();

      if (payload) {
        // –°—Ç–∞—Ä—Ç –ø–æ —Å—Å—ã–ª–∫–µ —Å –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ ‚Äî –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º e-mail
        await this.findOrCreateProfile(ctx.from);
        awaitingEmail.delete(userId);
        emailVerified.add(userId);
        await this.sendAnimation(ctx, 'cute_a.mp4', this.welcomeMessage);
        return;
      }

      // –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º e-mail
      await this.findOrCreateProfile(ctx.from);
      emailVerified.delete(userId);
      awaitingEmail.add(userId);
      await ctx.reply(
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, e-mail, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ We Have Music. –ë–µ–∑ e-mail –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.',
      );
    });

    // –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    this.bot.command('testAddTokens', async (ctx) => {
      const profile = await this.findOrCreateProfile(ctx.message.from);
      const add = 1000;
      profile.tokens.tokens += add;
      await this.tokensRepo.save(profile.tokens);
      await this.addTransaction(profile, add, 'CREDIT', 'test purchase');
      await ctx.reply('–ù–∞ –≤–∞—à —Å—á—ë—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ 1000 —Ç–æ–∫–µ–Ω–æ–≤.');
    });

    // –¢–µ—Å—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
    this.bot.command('testZeroTokens', async (ctx) => {
      const profile = await this.findOrCreateProfile(ctx.message.from);
      const currentTokens = profile.tokens.tokens;
      if (currentTokens > 0) {
        profile.tokens.tokens = 0;
        await this.tokensRepo.save(profile.tokens);
        await this.addTransaction(profile, currentTokens, 'DEBIT', 'test zero tokens');
        await ctx.reply(`–í—Å–µ —Ç–æ–∫–µ–Ω—ã —Å–ø–∏—Å–∞–Ω—ã. –°–ø–∏—Å–∞–Ω–æ: ${currentTokens} —Ç–æ–∫–µ–Ω–æ–≤.`);
      } else {
        await ctx.reply('–£ –≤–∞—Å —É–∂–µ 0 —Ç–æ–∫–µ–Ω–æ–≤.');
      }
    });

    // –¢–µ—Å—Ç–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    this.bot.command('testRemoveUser', async (ctx) => {
      const profile = await this.profileRepo.findOne({
        where: { telegramId: String(ctx.message.from.id) },
        relations: ['tokens'],
      });

      if (!profile) {
        await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
        return;
      }

      try {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
        await this.profileRepo.remove(profile);
        await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
      } catch (error) {
        this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      }
    });

    this.bot.catch((err, ctx) => {
      this.logger.error('TG error', err);
      this.logger.debug('Update caused error', JSON.stringify(ctx.update, null, 2));
    });
  }
}
